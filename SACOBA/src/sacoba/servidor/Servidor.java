/*
 *  Sistema de Asistencia de Control Bancario
 *  SACOBA
 *  
 *  Marcela Cascante Quiros
 *  Diego Delgado Cerdas
 *  Alejandro Loaiza Arguedas
 *  Jose David Mora Loria
 */
package sacoba.servidor;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import sacoba.servidor.estructuras.ListaEnlazadaPilas;
import sacoba.servidor.estructuras.PilaClientes;
import sacoba.vista.VentanaBase;

/**
 *
 * @author jmora
 */
public class Servidor extends VentanaBase {

    private ServerSocket serverSocket;
    private Socket socket, socketPuerta, socketMonitor, socketCaja;
    private ExecutorService service;
    private String txtLog = new String();

    /*
    TODO    Lista enlazada de clientes
            1.  Se agrega una pila de ClientePuerta
            2.  Se agrega una pila de ClienteMonitore
            3.  Se agrega una pila de ClienteCaja
     */
    private ListaEnlazadaPilas clientes;

    /**
     * Creates new form Servidor
     */
    public Servidor() {
        initComponents();

        //Inicializa la lista enlazada para almacenar clientes
        clientes = new ListaEnlazadaPilas();
        clientes.inserta("Puertas");
        clientes.inserta("Monitores");
        clientes.inserta("Cajas");

        try {
            service = Executors.newCachedThreadPool();
            serverSocket = new ServerSocket(2356);
            Accept();
        } catch (IOException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void Accept() {
        try {
            while (true) {
                System.out.println("Accept 1");
                socket = serverSocket.accept();
                //TODO Segun el tipo del cliente se declara tipo ClientePuerta, ClienteMonitor, ClienteCaja y se agreagan a la pila correspondientes
//                ClienteServidor client = new ClienteServidor(socket);
//                service.submit(client);
            }
        } catch (IOException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public ListaEnlazadaPilas getClientes() {
        return clientes;
    }

    public PilaClientes getPuertas() {
        return this.clientes.getPila("Puertas");
    }

    public PilaClientes getMonitores() {
        return this.clientes.getPila("Monitores");
    }

    public PilaClientes getCajas() {
        return this.clientes.getPila("Cajas");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
         // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 950, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Servidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
